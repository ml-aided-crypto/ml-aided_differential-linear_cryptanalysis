# -*- coding: utf-8 -*-
"""
Created on Wed May 31 07:21:31 2023

@author: x
"""

import numpy as np
from os import urandom

#only for 64bit array
def num2bitarray(x):
    r=bin(x)[2:]
    r=r.zfill(64)
    r=list(r)
    r=np.array(r,dtype=np.uint8)
    return r
    

def des_all_round():
    return (16)


def IP(x):
    IP_table=[57,49,41,33,25,17,9,1, 
              59,51,43,35,27,19,11,3, 
              61,53,45,37,29,21,13,5, 
              63,55,47,39,31,23,15,7, 
              56,48,40,32,24,16,8,0, 
              58,50,42,34,26,18,10,2, 
              60,52,44,36,28,20,12,4, 
              62,54,46,38,30,22,14,6]

    return x[:,IP_table]

def inv_IP(x):
    invIP_table=[39,7,47,15,55,23,63,31, 
	             38,6,46,14,54,22,62,30, 
	             37,5,45,13,53,21,61,29, 
                 36,4,44,12,52,20,60,28, 
                 35,3,43,11,51,19,59,27,
                 34,2,42,10,50,18,58,26, 
                 33,1,41,9,49,17,57,25, 
                 32,0,40,8,48,16,56,24]

    return x[:,invIP_table]

def S_box():
    s0=np.array([[1,1,1,0],[0,0,0,0],[0,1,0,0],[1,1,1,1],[1,1,0,1],[0,1,1,1],[0,0,0,1],[0,1,0,0],[0,0,1,0],[1,1,1,0],[1,1,1,1],[0,0,1,0],[1,0,1,1],[1,1,0,1],[1,0,0,0],[0,0,0,1],[0,0,1,1],[1,0,1,0],[1,0,1,0],[0,1,1,0],[0,1,1,0],[1,1,0,0],[1,1,0,0],[1,0,1,1],[0,1,0,1],[1,0,0,1],[1,0,0,1],[0,1,0,1],[0,0,0,0],[0,0,1,1],[0,1,1,1],[1,0,0,0],[0,1,0,0],[1,1,1,1],[0,0,0,1],[1,1,0,0],[1,1,1,0],[1,0,0,0],[1,0,0,0],[0,0,1,0],[1,1,0,1],[0,1,0,0],[0,1,1,0],[1,0,0,1],[0,0,1,0],[0,0,0,1],[1,0,1,1],[0,1,1,1],[1,1,1,1],[0,1,0,1],[1,1,0,0],[1,0,1,1],[1,0,0,1],[0,0,1,1],[0,1,1,1],[1,1,1,0],[0,0,1,1],[1,0,1,0],[1,0,1,0],[0,0,0,0],[0,1,0,1],[0,1,1,0],[0,0,0,0],[1,1,0,1]],dtype=np.uint8)
    s1=np.array([[1,1,1,1],[0,0,1,1],[0,0,0,1],[1,1,0,1],[1,0,0,0],[0,1,0,0],[1,1,1,0],[0,1,1,1],[0,1,1,0],[1,1,1,1],[1,0,1,1],[0,0,1,0],[0,0,1,1],[1,0,0,0],[0,1,0,0],[1,1,1,0],[1,0,0,1],[1,1,0,0],[0,1,1,1],[0,0,0,0],[0,0,1,0],[0,0,0,1],[1,1,0,1],[1,0,1,0],[1,1,0,0],[0,1,1,0],[0,0,0,0],[1,0,0,1],[0,1,0,1],[1,0,1,1],[1,0,1,0],[0,1,0,1],[0,0,0,0],[1,1,0,1],[1,1,1,0],[1,0,0,0],[0,1,1,1],[1,0,1,0],[1,0,1,1],[0,0,0,1],[1,0,1,0],[0,0,1,1],[0,1,0,0],[1,1,1,1],[1,1,0,1],[0,1,0,0],[0,0,0,1],[0,0,1,0],[0,1,0,1],[1,0,1,1],[1,0,0,0],[0,1,1,0],[1,1,0,0],[0,1,1,1],[0,1,1,0],[1,1,0,0],[1,0,0,1],[0,0,0,0],[0,0,1,1],[0,1,0,1],[0,0,1,0],[1,1,1,0],[1,1,1,1],[1,0,0,1]],dtype=np.uint8)
    s2=np.array([[1,0,1,0],[1,1,0,1],[0,0,0,0],[0,1,1,1],[1,0,0,1],[0,0,0,0],[1,1,1,0],[1,0,0,1],[0,1,1,0],[0,0,1,1],[0,0,1,1],[0,1,0,0],[1,1,1,1],[0,1,1,0],[0,1,0,1],[1,0,1,0],[0,0,0,1],[0,0,1,0],[1,1,0,1],[1,0,0,0],[1,1,0,0],[0,1,0,1],[0,1,1,1],[1,1,1,0],[1,0,1,1],[1,1,0,0],[0,1,0,0],[1,0,1,1],[0,0,1,0],[1,1,1,1],[1,0,0,0],[0,0,0,1],[1,1,0,1],[0,0,0,1],[0,1,1,0],[1,0,1,0],[0,1,0,0],[1,1,0,1],[1,0,0,1],[0,0,0,0],[1,0,0,0],[0,1,1,0],[1,1,1,1],[1,0,0,1],[0,0,1,1],[1,0,0,0],[0,0,0,0],[0,1,1,1],[1,0,1,1],[0,1,0,0],[0,0,0,1],[1,1,1,1],[0,0,1,0],[1,1,1,0],[1,1,0,0],[0,0,1,1],[0,1,0,1],[1,0,1,1],[1,0,1,0],[0,1,0,1],[1,1,1,0],[0,0,1,0],[0,1,1,1],[1,1,0,0]],dtype=np.uint8)
    s3=np.array([[0,1,1,1],[1,1,0,1],[1,1,0,1],[1,0,0,0],[1,1,1,0],[1,0,1,1],[0,0,1,1],[0,1,0,1],[0,0,0,0],[0,1,1,0],[0,1,1,0],[1,1,1,1],[1,0,0,1],[0,0,0,0],[1,0,1,0],[0,0,1,1],[0,0,0,1],[0,1,0,0],[0,0,1,0],[0,1,1,1],[1,0,0,0],[0,0,1,0],[0,1,0,1],[1,1,0,0],[1,0,1,1],[0,0,0,1],[1,1,0,0],[1,0,1,0],[0,1,0,0],[1,1,1,0],[1,1,1,1],[1,0,0,1],[1,0,1,0],[0,0,1,1],[0,1,1,0],[1,1,1,1],[1,0,0,1],[0,0,0,0],[0,0,0,0],[0,1,1,0],[1,1,0,0],[1,0,1,0],[1,0,1,1],[0,0,0,1],[0,1,1,1],[1,1,0,1],[1,1,0,1],[1,0,0,0],[1,1,1,1],[1,0,0,1],[0,0,0,1],[0,1,0,0],[0,0,1,1],[0,1,0,1],[1,1,1,0],[1,0,1,1],[0,1,0,1],[1,1,0,0],[0,0,1,0],[0,1,1,1],[1,0,0,0],[0,0,1,0],[0,1,0,0],[1,1,1,0]],dtype=np.uint8)
    s4=np.array([[0,0,1,0],[1,1,1,0],[1,1,0,0],[1,0,1,1],[0,1,0,0],[0,0,1,0],[0,0,0,1],[1,1,0,0],[0,1,1,1],[0,1,0,0],[1,0,1,0],[0,1,1,1],[1,0,1,1],[1,1,0,1],[0,1,1,0],[0,0,0,1],[1,0,0,0],[0,1,0,1],[0,1,0,1],[0,0,0,0],[0,0,1,1],[1,1,1,1],[1,1,1,1],[1,0,1,0],[1,1,0,1],[0,0,1,1],[0,0,0,0],[1,0,0,1],[1,1,1,0],[1,0,0,0],[1,0,0,1],[0,1,1,0],[0,1,0,0],[1,0,1,1],[0,0,1,0],[1,0,0,0],[0,0,0,1],[1,1,0,0],[1,0,1,1],[0,1,1,1],[1,0,1,0],[0,0,0,1],[1,1,0,1],[1,1,1,0],[0,1,1,1],[0,0,1,0],[1,0,0,0],[1,1,0,1],[1,1,1,1],[0,1,1,0],[1,0,0,1],[1,1,1,1],[1,1,0,0],[0,0,0,0],[0,1,0,1],[1,0,0,1],[0,1,1,0],[1,0,1,0],[0,0,1,1],[0,1,0,0],[0,0,0,0],[0,1,0,1],[1,1,1,0],[0,0,1,1]],dtype=np.uint8)
    s5=np.array([[1,1,0,0],[1,0,1,0],[0,0,0,1],[1,1,1,1],[1,0,1,0],[0,1,0,0],[1,1,1,1],[0,0,1,0],[1,0,0,1],[0,1,1,1],[0,0,1,0],[1,1,0,0],[0,1,1,0],[1,0,0,1],[1,0,0,0],[0,1,0,1],[0,0,0,0],[0,1,1,0],[1,1,0,1],[0,0,0,1],[0,0,1,1],[1,1,0,1],[0,1,0,0],[1,1,1,0],[1,1,1,0],[0,0,0,0],[0,1,1,1],[1,0,1,1],[0,1,0,1],[0,0,1,1],[1,0,1,1],[1,0,0,0],[1,0,0,1],[0,1,0,0],[1,1,1,0],[0,0,1,1],[1,1,1,1],[0,0,1,0],[0,1,0,1],[1,1,0,0],[0,0,1,0],[1,0,0,1],[1,0,0,0],[0,1,0,1],[1,1,0,0],[1,1,1,1],[0,0,1,1],[1,0,1,0],[0,1,1,1],[1,0,1,1],[0,0,0,0],[1,1,1,0],[0,1,0,0],[0,0,0,1],[1,0,1,0],[0,1,1,1],[0,0,0,1],[0,1,1,0],[1,1,0,1],[0,0,0,0],[1,0,1,1],[1,0,0,0],[0,1,1,0],[1,1,0,1]],dtype=np.uint8)
    s6=np.array([[0,1,0,0],[1,1,0,1],[1,0,1,1],[0,0,0,0],[0,0,1,0],[1,0,1,1],[1,1,1,0],[0,1,1,1],[1,1,1,1],[0,1,0,0],[0,0,0,0],[1,0,0,1],[1,0,0,0],[0,0,0,1],[1,1,0,1],[1,0,1,0],[0,0,1,1],[1,1,1,0],[1,1,0,0],[0,0,1,1],[1,0,0,1],[0,1,0,1],[0,1,1,1],[1,1,0,0],[0,1,0,1],[0,0,1,0],[1,0,1,0],[1,1,1,1],[0,1,1,0],[1,0,0,0],[0,0,0,1],[0,1,1,0],[0,0,0,1],[0,1,1,0],[0,1,0,0],[1,0,1,1],[1,0,1,1],[1,1,0,1],[1,1,0,1],[1,0,0,0],[1,1,0,0],[0,0,0,1],[0,0,1,1],[0,1,0,0],[0,1,1,1],[1,0,1,0],[1,1,1,0],[0,1,1,1],[1,0,1,0],[1,0,0,1],[1,1,1,1],[0,1,0,1],[0,1,1,0],[0,0,0,0],[1,0,0,0],[1,1,1,1],[0,0,0,0],[1,1,1,0],[0,1,0,1],[0,0,1,0],[1,0,0,1],[0,0,1,1],[0,0,1,0],[1,1,0,0]],dtype=np.uint8)
    s7=np.array([[1,1,0,1],[0,0,0,1],[0,0,1,0],[1,1,1,1],[1,0,0,0],[1,1,0,1],[0,1,0,0],[1,0,0,0],[0,1,1,0],[1,0,1,0],[1,1,1,1],[0,0,1,1],[1,0,1,1],[0,1,1,1],[0,0,0,1],[0,1,0,0],[1,0,1,0],[1,1,0,0],[1,0,0,1],[0,1,0,1],[0,0,1,1],[0,1,1,0],[1,1,1,0],[1,0,1,1],[0,1,0,1],[0,0,0,0],[0,0,0,0],[1,1,1,0],[1,1,0,0],[1,0,0,1],[0,1,1,1],[0,0,1,0],[0,1,1,1],[0,0,1,0],[1,0,1,1],[0,0,0,1],[0,1,0,0],[1,1,1,0],[0,0,0,1],[0,1,1,1],[1,0,0,1],[0,1,0,0],[1,1,0,0],[1,0,1,0],[1,1,1,0],[1,0,0,0],[0,0,1,0],[1,1,0,1],[0,0,0,0],[1,1,1,1],[0,1,1,0],[1,1,0,0],[1,0,1,0],[1,0,0,1],[1,1,0,1],[0,0,0,0],[1,1,1,1],[0,0,1,1],[0,0,1,1],[0,1,0,1],[0,1,0,1],[0,1,1,0],[1,0,0,0],[1,0,1,1]],dtype=np.uint8)
    
    return [s0,s1,s2,s3,s4,s5,s6,s7]
    
    
def bit2num(x):
    return (x[:,0]<<5)+(x[:,1]<<4)+(x[:,2]<<3)+(x[:,3]<<2)+(x[:,4]<<1)+(x[:,5]<<0)



def expand_key(k,t):
    subkey=[]
    move_bit=[1,1,2,2,2,2,2,2,1,2,2,2,2,2,2,1]
    move_table=[
        [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,0,
        29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,28],
        [2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,0,1,
        30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,28,29]]
    
    pc1=[56,48,40,32,24,16,8, 
    	    0,57,49,41,33,25,17, 
    	    9,1,58,50,42,34,26, 
    	   18,10,2,59,51,43,35,
           62,54,46,38,30,22,14, 
	        6,61,53,45,37,29,21, 
	       13,5,60,52,44,36,28, 
	       20,12,4,27,19,11,3]
    
    pc2=[13,16,10,23, 0, 4, 2,27, 
	     14, 5,20, 9,22,18,11, 3, 
      	 25, 7,15, 6,26,19,12, 1, 
	     40,51,30,36,46,54,29,39, 
	     50,44,32,47,43,48,38,55,
         33,52,45,41,49,35,28,31]
    
    C_D=k[:,pc1]

    for i in range(t):
        C_D=np.array(C_D[:,move_table[move_bit[i]-1]])
        subkey.append(C_D[:,pc2])

    return subkey
        
   

def round_function(r,k):
    select_table=[31,  0,  1, 2, 3, 4, 
	               3,  4,  5, 6, 7, 8, 
                   7,  8,  9,10,11,12, 
                   11,12, 13,14,15,16, 
                   15,16, 17,18,19,20, 
                   19,20, 21,22,23,24, 
                   23,24, 25,26,27,28, 
                   27,28, 29,30,31, 0]
    round_function_ip_table=[15,6,19,20,28,11,27,16, 
	                         0,14,22,25,4,17,30,9, 
                             1,7,23,13,31,26,2,8, 
	                         18,12,29,5,21,10,3,24]
    
    return_r=np.zeros((r.shape[0],32),dtype=r.dtype)
    
    extend_r=np.array(r[:,select_table])
    
    extend_r=extend_r^k
    s_box=S_box()
    

    for i in range(8):
        buffer=extend_r[:,i*6:(i+1)*6]
        buffer=bit2num(buffer)
        return_r[:,i*4:(i+1)*4]=s_box[i][buffer]
    
    return return_r[:,round_function_ip_table]
   

def enc_one_round(p,k):
    l=p[0]
    r=p[1]
    return r,l^round_function(r,k)

def encrypt(p,ks):
    l,r=p[0],p[1]
    for k in ks:  
        l,r = enc_one_round((l,r), k) 
    return (l,r)



def check_testvector():
    #plain=0x0123456789ABCDEF
    #key=0x133457799BBCDFF1
    #c=0x
    
    #p=0
    #k=0
    #c=0x8CA64DE9C1B123A7
    
    #plain=0xFFFFFFFFFFFFFFFF 
    #key=0xFFFFFFFFFFFFFFFF
    
    key_test=[
         0x0000000000000000 
        ,0xFFFFFFFFFFFFFFFF 
        ,0x3000000000000000 
        ,0x1111111111111111 
        ,0x0123456789ABCDEF 
        ,0x1111111111111111 
        ,0x0000000000000000 
        ,0xFEDCBA9876543210 
        ,0x7CA110454A1A6E57 
        ,0x0131D9619DC1376E 
        ,0x07A1133E4A0B2686 
        ,0x3849674C2602319E 
        ,0x04B915BA43FEB5B6 
        ,0x0113B970FD34F2CE 
        ,0x0170F175468FB5E6 
        ,0x43297FAD38E373FE 
        ,0x07A7137045DA2A16 
        ,0x04689104C2FD3B2F 
        ,0x37D06BB516CB7546 
        ,0x1F08260D1AC2465E 
        ,0x584023641ABA6176 
        ,0x025816164629B007 
        ,0x49793EBC79B3258F 
        ,0x4FB05E1515AB73A7 
        ,0x49E95D6D4CA229BF 
        ,0x018310DC409B26D6 
        ,0x1C587F1C13924FEF 
        ,0x0101010101010101 
        ,0x1F1F1F1F0E0E0E0E 
        ,0xE0FEE0FEF1FEF1FE 
        ,0x0000000000000000 
        ,0xFFFFFFFFFFFFFFFF 
        ,0x0123456789ABCDEF 
        ,0xFEDCBA9876543210
        
        
        ]
    plain_test=[
        0x0000000000000000 
       ,0xFFFFFFFFFFFFFFFF 
       ,0x1000000000000001 
       ,0x1111111111111111 
       ,0x1111111111111111 
       ,0x0123456789ABCDEF 
       ,0x0000000000000000 
       ,0x0123456789ABCDEF 
     ,0x01A1D6D039776742 
     ,0x5CD54CA83DEF57DA 
     ,0x0248D43806F67172 
     ,0x51454B582DDF440A 
     ,0x42FD443059577FA2 
     ,0x059B5E0851CF143A
     ,0x0756D8E0774761D2 
     ,0x762514B829BF486A 
     ,0x3BDD119049372802 
     ,0x26955F6835AF609A 
     ,0x164D5E404F275232 
     ,0x6B056E18759F5CCA 
     ,0x004BD6EF09176062 
     ,0x480D39006EE762F2 
     ,0x437540C8698F3CFA 
     ,0x072D43A077075292 
     ,0x02FE55778117F12A
     ,0x1D9D5C5018F728C2 
     ,0x305532286D6F295A 
     ,0x0123456789ABCDEF 
     ,0x0123456789ABCDEF
     ,0x0123456789ABCDEF 
     ,0xFFFFFFFFFFFFFFFF 
     ,0x0000000000000000 
     ,0x0000000000000000 
     ,0xFFFFFFFFFFFFFFFF ]
    
    cipher_test=[
          0x8CA64DE9C1B123A7
         ,0x7359B2163E4EDC58
         ,0x958E6E627A05557B
         ,0xF40379AB9E0EC533
         ,0x17668DFC7292532D
         ,0x8A5AE1F81AB8F2DD
         ,0x8CA64DE9C1B123A7
         ,0xED39D950FA74BCC4
         ,0x690F5B0D9A26939B
         ,0x7A389D10354BD271
         ,0x868EBB51CAB4599A
         ,0x7178876E01F19B2A
         ,0xAF37FB421F8C4095
         ,0x86A560F10EC6D85B
         ,0x0CD3DA020021DC09
         ,0xEA676B2CB7DB2B7A
         ,0xDFD64A815CAF1A0F
         ,0x5C513C9C4886C088
         ,0x0A2AEEAE3FF4AB77
         ,0xEF1BF03E5DFA575A
         ,0x88BF0DB6D70DEE56
         ,0xA1F9915541020B56
         ,0x6FBF1CAFCFFD0556
         ,0x2F22E49BAB7CA1AC
         ,0x5A6B612CC26CCE4A
         ,0x5F4C038ED12B2E41
         ,0x63FAC0D034D9F793
         ,0x617B3A0CE8F07100
         ,0xDB958605F8C8C606
         ,0xEDBFD1C66C29CCC7
         ,0x355550B2150E2451
         ,0xCAAAAF4DEAF1DBAE
         ,0xD5D44FF720683D0D
         ,0x2A2BB008DF97C2F2
        
        ]
    
    

    plain=[num2bitarray(i) for i in plain_test]
    key=[num2bitarray(i) for i in key_test]
    
    plain=np.array(plain)
    
    key=np.array(key)
    

    subkey=expand_key(key,des_all_round())
    
    plain=IP(plain)
    l,r=encrypt((plain[:,:32],plain[:,32:]),subkey)
    cipher=np.concatenate((r,l),axis=1)#
    cipher=inv_IP(cipher)

    c_val=[]
    for c in cipher:
        hex_c=0
        for i in c:
            hex_c=(hex_c<<1)+int(i)
        c_val.append(hex_c)
    
    flag=1
    for i in range(len(cipher)):
        if(c_val[i]!=cipher_test[i]):
            flag=0
            break
    if flag==1:
        print("Testvector verified.")
        return(flag)
    else:
        print("Testvector not verified.")
        return(flag)
    

#a=check_testvector()

